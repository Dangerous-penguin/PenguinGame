//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/GameControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace DangerousPenguin.Input
{
    public partial class @GameControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GameControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameControls"",
    ""maps"": [
        {
            ""name"": ""Game"",
            ""id"": ""7b39d943-f1c7-4e77-86d9-1468fd686997"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""d561b20b-0850-444b-ac29-1ce04dd7df92"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryAttack"",
                    ""type"": ""Button"",
                    ""id"": ""1ebc5eab-1379-4786-b901-2a4ea63de94b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseSkill1"",
                    ""type"": ""Button"",
                    ""id"": ""f1757d33-2685-48a5-add3-08d448506533"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseSkill2"",
                    ""type"": ""Button"",
                    ""id"": ""30ee4a96-ee43-4ddc-bb57-953e7a1e3bfd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseSkill3"",
                    ""type"": ""Button"",
                    ""id"": ""d2f271ad-f280-476e-8a19-b80766256c7b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d6f9150c-34c4-467d-92d2-1e731a73063d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""613b3474-9628-4059-885a-0fc9333f5a4a"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Press,Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b183530f-dcca-4edc-8e41-3f38878add9a"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseSkill1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d440a852-370c-480f-aec4-a92b772667d3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseSkill2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2829e8be-ad31-4de5-8f17-0501dcbbbef4"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseSkill3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Game
            m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
            m_Game_Move = m_Game.FindAction("Move", throwIfNotFound: true);
            m_Game_PrimaryAttack = m_Game.FindAction("PrimaryAttack", throwIfNotFound: true);
            m_Game_UseSkill1 = m_Game.FindAction("UseSkill1", throwIfNotFound: true);
            m_Game_UseSkill2 = m_Game.FindAction("UseSkill2", throwIfNotFound: true);
            m_Game_UseSkill3 = m_Game.FindAction("UseSkill3", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Game
        private readonly InputActionMap m_Game;
        private IGameActions m_GameActionsCallbackInterface;
        private readonly InputAction m_Game_Move;
        private readonly InputAction m_Game_PrimaryAttack;
        private readonly InputAction m_Game_UseSkill1;
        private readonly InputAction m_Game_UseSkill2;
        private readonly InputAction m_Game_UseSkill3;
        public struct GameActions
        {
            private @GameControls m_Wrapper;
            public GameActions(@GameControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Game_Move;
            public InputAction @PrimaryAttack => m_Wrapper.m_Game_PrimaryAttack;
            public InputAction @UseSkill1 => m_Wrapper.m_Game_UseSkill1;
            public InputAction @UseSkill2 => m_Wrapper.m_Game_UseSkill2;
            public InputAction @UseSkill3 => m_Wrapper.m_Game_UseSkill3;
            public InputActionMap Get() { return m_Wrapper.m_Game; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
            public void SetCallbacks(IGameActions instance)
            {
                if (m_Wrapper.m_GameActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_GameActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnMove;
                    @PrimaryAttack.started -= m_Wrapper.m_GameActionsCallbackInterface.OnPrimaryAttack;
                    @PrimaryAttack.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnPrimaryAttack;
                    @PrimaryAttack.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnPrimaryAttack;
                    @UseSkill1.started -= m_Wrapper.m_GameActionsCallbackInterface.OnUseSkill1;
                    @UseSkill1.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnUseSkill1;
                    @UseSkill1.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnUseSkill1;
                    @UseSkill2.started -= m_Wrapper.m_GameActionsCallbackInterface.OnUseSkill2;
                    @UseSkill2.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnUseSkill2;
                    @UseSkill2.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnUseSkill2;
                    @UseSkill3.started -= m_Wrapper.m_GameActionsCallbackInterface.OnUseSkill3;
                    @UseSkill3.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnUseSkill3;
                    @UseSkill3.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnUseSkill3;
                }
                m_Wrapper.m_GameActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @PrimaryAttack.started += instance.OnPrimaryAttack;
                    @PrimaryAttack.performed += instance.OnPrimaryAttack;
                    @PrimaryAttack.canceled += instance.OnPrimaryAttack;
                    @UseSkill1.started += instance.OnUseSkill1;
                    @UseSkill1.performed += instance.OnUseSkill1;
                    @UseSkill1.canceled += instance.OnUseSkill1;
                    @UseSkill2.started += instance.OnUseSkill2;
                    @UseSkill2.performed += instance.OnUseSkill2;
                    @UseSkill2.canceled += instance.OnUseSkill2;
                    @UseSkill3.started += instance.OnUseSkill3;
                    @UseSkill3.performed += instance.OnUseSkill3;
                    @UseSkill3.canceled += instance.OnUseSkill3;
                }
            }
        }
        public GameActions @Game => new GameActions(this);
        public interface IGameActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnPrimaryAttack(InputAction.CallbackContext context);
            void OnUseSkill1(InputAction.CallbackContext context);
            void OnUseSkill2(InputAction.CallbackContext context);
            void OnUseSkill3(InputAction.CallbackContext context);
        }
    }
}
